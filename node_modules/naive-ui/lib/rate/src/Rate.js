"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.rateProps = void 0;
const vue_1 = require("vue");
const vooks_1 = require("vooks");
const _internal_1 = require("../../_internal");
const _mixins_1 = require("../../_mixins");
const _utils_1 = require("../../_utils");
const styles_1 = require("../styles");
const index_cssr_1 = __importDefault(require("./styles/index.cssr"));
const StarIcon_1 = __importDefault(require("./StarIcon"));
exports.rateProps = Object.assign(Object.assign({}, _mixins_1.useTheme.props), { allowHalf: Boolean, count: {
        type: Number,
        default: 5
    }, value: Number, defaultValue: {
        type: Number,
        default: 0
    }, readonly: Boolean, size: {
        type: [String, Number],
        default: 'medium'
    }, color: String, 'onUpdate:value': [Function, Array], onUpdateValue: [Function, Array] });
exports.default = (0, vue_1.defineComponent)({
    name: 'Rate',
    props: exports.rateProps,
    setup(props) {
        const { mergedClsPrefixRef, inlineThemeDisabled } = (0, _mixins_1.useConfig)(props);
        const themeRef = (0, _mixins_1.useTheme)('Rate', '-rate', index_cssr_1.default, styles_1.rateLight, props, mergedClsPrefixRef);
        const controlledValueRef = (0, vue_1.toRef)(props, 'value');
        const uncontrolledValueRef = (0, vue_1.ref)(props.defaultValue);
        const hoverIndexRef = (0, vue_1.ref)(null);
        const formItem = (0, _mixins_1.useFormItem)(props);
        function doUpdateValue(value) {
            const { 'onUpdate:value': _onUpdateValue, onUpdateValue } = props;
            const { nTriggerFormChange, nTriggerFormInput } = formItem;
            if (_onUpdateValue) {
                (0, _utils_1.call)(_onUpdateValue, value);
            }
            if (onUpdateValue) {
                (0, _utils_1.call)(onUpdateValue, value);
            }
            uncontrolledValueRef.value = value;
            nTriggerFormChange();
            nTriggerFormInput();
        }
        function getDerivedValue(index, e) {
            if (props.allowHalf) {
                if (e.offsetX >=
                    Math.floor(e.currentTarget.offsetWidth / 2)) {
                    return index + 1;
                }
                else {
                    return index + 0.5;
                }
            }
            else {
                return index + 1;
            }
        }
        function handleMouseMove(index, e) {
            hoverIndexRef.value = getDerivedValue(index, e);
        }
        function handleMouseLeave() {
            hoverIndexRef.value = null;
        }
        function handleClick(index, e) {
            doUpdateValue(getDerivedValue(index, e));
        }
        const mergedSizeRef = (0, vue_1.computed)(() => {
            const { size } = props;
            const { self } = themeRef.value;
            if (typeof size === 'number') {
                return `${size}px`;
            }
            else {
                return self[(0, _utils_1.createKey)('size', size)];
            }
        });
        const cssVarsRef = (0, vue_1.computed)(() => {
            const { common: { cubicBezierEaseInOut }, self } = themeRef.value;
            const { itemColor, itemColorActive } = self;
            return {
                '--n-bezier': cubicBezierEaseInOut,
                '--n-item-color': itemColor,
                '--n-item-color-active': props.color || itemColorActive,
                '--n-item-size': mergedSizeRef.value
            };
        });
        const themeClassHandle = inlineThemeDisabled
            ? (0, _mixins_1.useThemeClass)('rate', (0, vue_1.computed)(() => {
                const size = mergedSizeRef.value;
                const { color } = props;
                let hash = '';
                if (size) {
                    hash += size[0];
                }
                if (color) {
                    hash += (0, _utils_1.color2Class)(color);
                }
                return hash;
            }), cssVarsRef, props)
            : undefined;
        return {
            mergedClsPrefix: mergedClsPrefixRef,
            mergedValue: (0, vooks_1.useMergedState)(controlledValueRef, uncontrolledValueRef),
            hoverIndex: hoverIndexRef,
            handleMouseMove,
            handleClick,
            handleMouseLeave,
            cssVars: inlineThemeDisabled ? undefined : cssVarsRef,
            themeClass: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.themeClass,
            onRender: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.onRender
        };
    },
    render() {
        const { readonly, hoverIndex, mergedValue, mergedClsPrefix, onRender, $slots: { default: defaultSlot } } = this;
        onRender === null || onRender === void 0 ? void 0 : onRender();
        return ((0, vue_1.h)("div", { class: [
                `${mergedClsPrefix}-rate`,
                {
                    [`${mergedClsPrefix}-rate--readonly`]: readonly
                },
                this.themeClass
            ], style: this.cssVars, onMouseleave: this.handleMouseLeave }, (0, vue_1.renderList)(this.count, (_, index) => {
            const icon = defaultSlot ? (defaultSlot()) : ((0, vue_1.h)(_internal_1.NBaseIcon, { clsPrefix: mergedClsPrefix }, { default: () => StarIcon_1.default }));
            const fullStarActive = hoverIndex !== null
                ? index + 1 <= hoverIndex
                : index + 1 <= mergedValue;
            return ((0, vue_1.h)("div", { key: index, class: [
                    `${mergedClsPrefix}-rate__item`,
                    fullStarActive && `${mergedClsPrefix}-rate__item--active`
                ], onClick: readonly
                    ? undefined
                    : (e) => {
                        this.handleClick(index, e);
                    }, onMousemove: readonly
                    ? undefined
                    : (e) => {
                        this.handleMouseMove(index, e);
                    } },
                icon,
                this.allowHalf ? ((0, vue_1.h)("div", { class: [
                        `${mergedClsPrefix}-rate__half`,
                        {
                            [`${mergedClsPrefix}-rate__half--active`]: !fullStarActive && hoverIndex !== null
                                ? index + 0.5 <= hoverIndex
                                : index + 0.5 <= mergedValue
                        }
                    ] }, icon)) : null));
        })));
    }
});
