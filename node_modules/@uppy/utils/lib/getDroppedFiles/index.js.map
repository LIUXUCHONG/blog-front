{"version":3,"sources":["index.js"],"names":["webkitGetAsEntryApi","fallbackApi","getDroppedFiles","dataTransfer","logDropError","items"],"mappings":";;MAAOA,mB;;MACAC,W;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACe,SAASC,eAAT,CAA0BC,YAA1B,SAA0E;AAAA;;AAAA,MAAlC;AAAEC,IAAAA,YAAY,GAAG,MAAM,CAAE;AAAzB,GAAkC,sBAAJ,EAAI;;AACvF;AACA,MAAI,uBAAAD,YAAY,CAACE,KAAb,iCAAqB,CAArB,KAA2B,sBAAsBF,YAAY,CAACE,KAAb,CAAmB,CAAnB,CAArD,EAA4E;AAC1E,WAAOL,mBAAmB,CAACG,YAAD,EAAeC,YAAf,CAA1B,CAD0E,CAE5E;AACC;;AACD,SAAOH,WAAW,CAACE,YAAD,CAAlB;AACD;;iBAPuBD,e","sourcesContent":["import webkitGetAsEntryApi from './utils/webkitGetAsEntryApi/index.js'\nimport fallbackApi from './utils/fallbackApi.js'\n\n/**\n * Returns a promise that resolves to the array of dropped files (if a folder is\n * dropped, and browser supports folder parsing - promise resolves to the flat\n * array of all files in all directories).\n * Each file has .relativePath prop appended to it (e.g. \"/docs/Prague/ticket_from_prague_to_ufa.pdf\")\n * if browser supports it. Otherwise it's undefined.\n *\n * @param {DataTransfer} dataTransfer\n * @param {Function} logDropError - a function that's called every time some\n * folder or some file error out (e.g. because of the folder name being too long\n * on Windows). Notice that resulting promise will always be resolved anyway.\n *\n * @returns {Promise} - Array<File>\n */\nexport default function getDroppedFiles (dataTransfer, { logDropError = () => {} } = {}) {\n  // Get all files from all subdirs. Works (at least) in Chrome, Mozilla, and Safari\n  if (dataTransfer.items?.[0] && 'webkitGetAsEntry' in dataTransfer.items[0]) {\n    return webkitGetAsEntryApi(dataTransfer, logDropError)\n  // Otherwise just return all first-order files\n  }\n  return fallbackApi(dataTransfer)\n}\n"]}